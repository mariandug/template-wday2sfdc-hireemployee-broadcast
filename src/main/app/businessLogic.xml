<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:data-mapper="http://www.mulesoft.org/schema/mule/ee/data-mapper" xmlns:batch="http://www.mulesoft.org/schema/mule/batch"
	xmlns:json="http://www.mulesoft.org/schema/mule/json"
	xmlns:wd-hr="http://www.mulesoft.org/schema/mule/wd-hr" xmlns:sfdc="http://www.mulesoft.org/schema/mule/sfdc" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking"
      xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
      xmlns:spring="http://www.springframework.org/schema/beans"
      version="EE-3.5.1"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/2.0/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/sfdc http://www.mulesoft.org/schema/mule/sfdc/current/mule-sfdc.xsd
http://www.mulesoft.org/schema/mule/wd-hr http://www.mulesoft.org/schema/mule/wd-hr/current/mule-wd-hr.xsd
http://www.mulesoft.org/schema/mule/ee/data-mapper http://www.mulesoft.org/schema/mule/ee/data-mapper/current/mule-data-mapper.xsd">
    
	<batch:job name="syncUserBatch">
		<batch:threading-profile poolExhaustedAction="WAIT" />
		<batch:process-records>
			<batch:step name="foreachUserInWorkdayGetUserInSalesforce">
				<enricher source="#[payload]" target="#[recordVars['userInSalesforce']]"
					doc:name="store result in record var 'userInSalesforce'">
					<sfdc:query-single config-ref="Salesforce"
						query="SELECT Id FROM User WHERE Email = '#[payload['Email']]'"
						doc:name="query User in Salesforce" />
				</enricher>
			</batch:step>
			<batch:step name="foreachUserInWorkdayUpsertUserInSalesforce">
				<expression-component doc:name="set ID for upsert"><![CDATA[if (recordVars['userInSalesforce'] instanceof NullPayload) {
} else {
	// Add target system ID as it is an update
    payload.put('Id', recordVars['userInSalesforce']['Id']);
}
]]></expression-component>
				<batch:commit size="200" doc:name="Batch Commit">
                    <sfdc:upsert config-ref="Salesforce" externalIdFieldName="Id" type="User" doc:name="upsert Users in Salesforce">
                        <sfdc:objects ref="#[payload]"/>
                    </sfdc:upsert>
                    <logger message="Users upsert result: #[payload]" level="INFO" doc:name="Logger 'users upsert result'"/>
                    <foreach doc:name="For each to check user's PerrmissionSet">
                        <expression-filter expression="#[payload.getId() != null]" doc:name="Filter 'skip if no user has been created/updated'"/>
						<enricher source="#[payload]" target="#[flowVars['userPermissionSet']]"
							doc:name="store result in record var 'userPermissionSet'" >
	                        <sfdc:query-single config-ref="Salesforce" doc:name="Query if exist PermissionSet for user" query="Select Id, p.PermissionSet.ProfileId, p.PermissionSetId, p.Assignee.Email, p.Assignee.Id From PermissionSetAssignment p where AssigneeId = '#[payload.getId()]' and PermissionSetId = '${sfdc.user.permission.id}'"/>
						</enricher>
                        <choice doc:name="Choice">
                            <when expression="#[flowVars['userPermissionSet'] == null]">
                                <processor-chain doc:name="Processor Chain">
                                    <data-mapper:transform config-ref="Result_To_UserId" doc:name="transform input arguments to values to setup PermissionSet of the upserted user">
                                        <data-mapper:input-arguments>
                                            <data-mapper:input-argument key="AssigneeId">#[payload.getId()]</data-mapper:input-argument>
                                            <data-mapper:input-argument key="PermissionSetId">#['${sfdc.user.permission.id}']</data-mapper:input-argument>
                                        </data-mapper:input-arguments>
                                    </data-mapper:transform>
                                    <sfdc:upsert config-ref="Salesforce" externalIdFieldName="Id" type="PermissionSetAssignment" doc:name="upsert User's Permission Set Assignment in Salesforce">
                                        <sfdc:objects ref="#[payload]"/>
                                    </sfdc:upsert>
                                    <logger message="Upsert result: #[payload]" level="INFO" doc:name="log Result"/>
                                </processor-chain>
                            </when>
                            <otherwise>
                                <logger level="INFO" doc:name="Nothing to set"/>
                            </otherwise>
                        </choice>
                    </foreach>
				</batch:commit>
			</batch:step>
		</batch:process-records>
		<batch:on-complete>
			<json:object-to-json-transformer
				doc:name="transform BatchJobInstance to JSON" />
			<logger level="INFO" doc:name="log 'Migration process has finished'"
				message="Migration process has finished: #[payload]" />
		</batch:on-complete>
	</batch:job>

    <flow name="mainFlow" doc:name="mainFlow">
        <batch:execute name="syncUserBatch" doc:name="trigger broadcastLeadBatch"/>
        <exception-strategy ref="defaultChoiceExceptionStrategy" doc:name="catch Exception and call defaultExceptionStrategy"/>
    </flow>
</mule>
