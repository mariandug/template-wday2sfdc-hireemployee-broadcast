<?xml version="1.0"?>
<configuration>
	<placeholders>
		<placeholder id="template_name">Workday to Salesforce Hire Employee Broadcast</placeholder>
	</placeholders>
	<sections>
		<section id="use_case">
			<![CDATA[
This Anypoint Template should serve as a foundation for setting an online sync of Employee Hires from Workday to Salesforce Users.

Every time there is a new Employee Hire or a change in an already existing one, the integration will poll for them in the Workday source instance and it will be responsible for creating/updating the User in Salesforce with the specified PermissionSet.

Requirements have been set not only to be used as examples, but also to establish a starting point to adapt your integration to your requirements.

As implemented, this Anypoint Template leverages the [Batch Module](http://www.mulesoft.org/documentation/display/current/Batch+Processing). The batch job is divided in Input, Process and On Complete stages.

The Template retrieves all Employee Hires that have changed since last poll, checks for duplicates and triggers the Batch process. During the Batch Process stage, in the first step the different Employees are matched by email with the existing Users in Salesforce. In the second step the users are upserted to Salesforce using a Batch Commit and updated with the specified PermissionSet.

Finally during the On Complete stage the Anypoint Template will log output statistics data into the console.
]]>
		</section>
		<section id="considerations">
			<![CDATA[
To make this Anypoint Template run, there are certain preconditions that must be considered. All of them deal with the preparations in both source and destination systems, that must be made in order for all to run smoothly. **Failling to do so could lead to unexpected behavior of the template.**

1. **Users cannot be deleted in SalesForce:** For now, the only thing to do regarding users removal is disabling/deactivating them, but this won't make the username available for a new user.
2. **Each user needs to be associated to a Profile:** SalesForce's profiles are what define the permissions the user will have for manipulating data and other users. Each SalesForce account has its own profiles. In this Anypoint Template you will find a processor labeled *setup Worker for upsert* where to set your Profile Ids from the source account. Note that for the integration test to run properly, you should change the constant *sfdc.profileId* in *mule.test.properties* to one that's valid in your source organization.
3. **Working with sandboxes for the same account**: Although each sandbox should be a completely different environment, Usernames cannot be repeated in different sandboxes, i.e. if you have a user with username *bob.dylan* in *sandbox A*, you will not be able to create another user with username *bob.dylan* in *sandbox B*. If you are indeed working with Sandboxes for the same SalesForce account you will need to map the source username to a different one in the target sandbox, for this purpose, please refer to the processor labeled *setup Worker for upsert*.
4. **Workday email uniqueness**: The email can be repeated for two or more accounts (or missing). Therefore Workday accounts with duplicate emails will be removed from processing in the Input stage.
]]>
		</section>
		<section id="application_configuration">
			<![CDATA[
+ poll.frequency `60000`
+ poll.startDelayMillis `1000`
+ watermark.default.expression `YESTERDAY`

#### Workday Connector configuration
+ wday.user `admin@workday`
+ wday.password `secret`
+ wday.endpoint `https://impl-cc.workday.com/ccx/service/workday/Human_Resources/v21.1`

#### Salesforce Connector
+ sfdc.username `user@company.com`
+ sfdc.password `secret`
+ sfdc.securityToken `1234fdkfdkso20kw2sd`
+ sfdc.url `https://login.salesforce.com/services/Soap/u/28.0`

+ user.localeSidKey `en_US`
+ user.languageLocaleKey `en_US`
+ user.timeZoneSidKey `America/New_York`
+ user.emailEncodingKey `ISO-8859-1`

+ sfdc.user.profile.id `10000000002D4JWAA0`
+ sfdc.user.permission.id `10000000002D5JWAA0`
]]>
		</section>
		<section id="api_calls">
			<![CDATA[
Salesforce imposes limits on the number of API Calls that can be made. Therefore calculating this amount may be an important factor to consider. The Anypoint Template calls to the API can be calculated using the formula:

***1 + X + X / 200***

Being ***X*** the number of Users to be synchronized on each run. 

The division by ***200*** is because, by default, Users are gathered in groups of 200 for each Upsert API Call in the commit step. Also consider that this calls are executed repeatedly every polling cycle.	

For instance if 10 records are fetched from origin instance, then 12 api calls will be made (1 + 10 + 1).
]]>
		</section>
		<section id="default_business_logic_xml">
		<![CDATA[
Functional aspect of the Anypoint Template is implemented on this XML, directed by a batch job that will be responsible for creations/updates. The severeal message processors constitute four high level actions that fully implement the logic of this Anypoint Template:

1. Job execution is invoked from triggerFlow (endpoints.xml) everytime there is a new query executed asking for created/updated Workers.
2. During the Process stage, each Workers will be filtered depending on, if it has an existing matching User in the Salesforce.
3. The last step of the Process stage will group the Users and create/update them in Salesforce. Finally during the On Complete stage the Anypoint Template will log output statistics data into the console.
]]>
		</section>
	</sections>
</configuration>